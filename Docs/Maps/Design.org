#+TITLE: Map Design
#+PROPERTIES:
 :Version: 0.01
 :Author: Corwin Brust
 :Created: 2020/01/11
 :END:

* Overview

This file provides drawing instruction sets as a
for common map features such as corridor, secret doors, standard
chambers and stairs.

The first column provides a SYMBOL for referencing the instruction set
in level designs.  PLAN is a mixed sequence of SVG drawing
instructions and functions which return lists of SVG drawing
instructions.  ORIGIN passed to such functions is a cons cell
containing ( X . Y ) representing the upper-left absolute grid
position of the upper-most left-most corner of the smallest possible
top-left justified rectangle completing covering the drawn region in
the coordinate space of the dungeon level we are rendering.

DOCUMENTATION provides information for Dungeon Masters and during game
design.  NARRATIVE provides hints or other information to players via
emacs interactive help e.g., tooltips, et. all.

* Implementation

This section describes and implements the inner-workings of SVG
rendering of maps.

** Cursor Drawing using the [[https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths][SVG path element]]

Dungeon using the Scalable Vector Graphic (SVG) [[https://www.w3.org/TR/SVG/paths.html][path element]] to
implement a simple cursor based drawing approach similar to [[https://en.wikipedia.org/wiki/Logo_(programming_language)][Logo]]
(e.g. [[https://github.com/hahahahaman/turtle-geometry][turtle graphics]]).  By concatenating all of the required draw
instructions for the elements of the map visible to players (along
with suitable fixed-address based movement instructions between) we
can add most non-text elements within a single path.

This imposes limitations in terms, for example, of individually
styling elements such as secret doors (drawn in-line, currently) but
seems a good starting point in terms of establishing a baseline for
the performance rendering SVG maps on-demand within Emacs.

* Controls

These variables will be available (lexically bound) during expansion
of the SVG path macros below.  They cannot considered global because
the data representing an individual map may be driving display into
several different buffers which must retain their own settings
(e.g. scale and view-box dimensions).

| Control   | Setting | Documentation                           | Narrative |
|-----------+---------+-----------------------------------------+-----------|
| scale     |     100 | Pixels per 10' game space.              |           |
| view-box  |      16 | List, min-x, min-y, width and height.   |           |
|-----------+---------+-----------------------------------------+-----------|
| path-data |         | While rendering, String: main draw path |           |
| map-data  |         | List, map features to draw              |           |

# | zoom     |       1 | Zoom, as a number between 0 and 1.      |           |

#+begin_src elisp
;; public vars
;; TODO: defcustom these instead?
(defvar dm-map-scale 100 "Drawing scale; pixles per 10' of map.

TODO: generate this var from the table above")

(defvar dm-map-view-box nil "Croping view-box for the SVG tag.

TODO: see `dm-scale' for detail.")

;; private vars
(defvar dm-map--path-data nil "Main SVG path data as a string.

TODO: see `dm-scale' for detail.")

(defvar dm-map--map-data nil "SVG data as a string.

TODO: see `dm-scale' for detail.")
#+end_src

** SVG path macros

These macros support noweb syntax with ~org-babel~ to eliminate boilerplate for
basic cursor based drawing using the [[https://css-tricks.com/svg-path-syntax-illustrated-guide/][SVG path element]].

#+begin_src emacs-lisp

  (defvar dm-map--svg-data "Non-path SVG instructions.

  Filled by `dm-map--append' for `dm-map-append' while appending to
  path data.")
  (defmacro dm-map-append (&rest forms)
    "Add FORMS to map.

  Generally meaning, append to the \"d\" attribute value for the primary
  path representing chambers, corridor and secret doors in map.

  FORMS may be any of:
   - strings
     - when starting with a \"<\"*, literal SVG source
     - otherwise literal path data
   - keywords
     - taken as SVG basic drawing elements
     - followed by a plist taking the form:
       ( :ATTRIBUTE1 \"value1\" ... )
   - functions
     - called without arguments
     - return treated as per FORMS

  As a special case, to support recursion, if FORMS begins with nil
  results aren't added to `dm-map--path-data' and returned value
  does not include any prior value thereof."
    ;; TODO put some code here
    (let* ((inhibit-add
	    (when (and forms (null (car forms)))))
	   (todo (if inhibit-add (cdr forms) forms))
	   (new-path (mapconcat 'dm-map--append todo)))
      (if inhibit-add
	  `(cons dm-map--svg-data (concat new-path))
	`(cons (setq dm-map--map-data
		     (concat dm-map--map-data dm-map--svg-data))
	       (setq dm-map--path-data
		     (concat dm-map--path-data ,new-path))))))

  (defun dm-map--append (form)
    "Implemention for `dm-map-append' which see.

  Return strings remaining after recursively processing FORM."
    (cond (nil "nope")
	  (t "yep")
	  ))
#+end_src

* Features

SVG drawing support for map features.

 * The first row defines (names) a Feature (e.g. SYMBOL).
 * Additional rows may define a new symbol or continue the draw
   instructions (the "Plan"), or Documentation, or Narrative, or more
   than one these, which are each appended to the most recently
   defined Feature's attributes.
 * Ignore Blank rows and hlines.

Note, the UM here is map cells (e.g. ~10'~ in game terms) not pixels.
Macros apply a scale factor during expansion.

TODO consider other fields: version, area


| Feature  | Plan                               | Documentation                           | Narrative |
|----------+------------------------------------+-----------------------------------------+-----------|
| c-N      | v1 h1 v1                           | North                                   |           |
| c-NS     | v1 m1,0 v-1                        | North/South                             |           |
| c--NSE   | v1                                 | North/South/East                        |           |
| c-NSE    | c--NSE                             | North/South/East                        |           |
|          | m.98,0 h.02 v-.02 m 0,-.96 h-.02   |                                         |           |
| c-NSEW   | m0,.02 v-.02 h2 m.96,0 h2 v.02     | North/South/East/West (four-way)        |           |
|          | m0,.96 v2 h-.02 m-.96,0 h-2 v-.02  | :comment from test.svg                  |           |
| c-NE     | m0,1 v1 h-1                        | North/East                              |           |
| c--NSW   | v1                                 | North/South/West                        |           |
| c-NSW    | c--NSW                             | North/South/West                        |           |
|          | m.98,0 h.02 v.02 m0,.96 v.02 h-.02 |                                         |           |
| c-NW     | v1 h1                              | North/East                              |           |
| c-S      | v1 m0,-1 h1 v1                     | South                                   |           |
| c-SE     | h1 v1                              |                                         |           |
| c--SEW   | h1                                 | South/East/West                         |           |
| c-SEW    |                                    | South/East/West                         |           |
| c-SW     | h1 m-1,0 v1                        | South/West                              |           |
| c-E      | h1 v1 h-1                          | East                                    |           |
| c-EW     | h1 m0,1 h-1                        | East/west                               |           |
| c-W      | v1 h1 m0,-1 h-1                    | East                                    |           |
| sN       | h.43 a.14,.14,0,1,1,.14,0          | South/East/West                         |           |
|          | -.14,-.14,0,1,1,-.14,0 h.43        | :efl secret-door North                  |           |
| sE       | v.43 a.14,.14,0,1,1,0,.14          | North/South/West                        |           |
|          | -.14,-.14,0,1,1,0,-.14 v.43        | :efl secret-door East                   |           |
| sS       | m0,1 h.43 a.14,.14,0,1,1,.14,0     | North/East/West                         |           |
|          | -.14,-.14,0,1,1,-.14,0 h.43        | :efl secret-door South                  |           |
| sW       | m1,0 v.43 a.14,.14,0,1,1,0,.14     | North/South/East                        |           |
|          | -.14,-.14,0,1,1,0,-.14 v.43        | :efl secret-door East                   |           |
| c-NS+sE  | c--NSE m-1,0 sE                    | North/South :elf secret-door East       |           |
| c-NS+sEW | c--NSE m-1,0 sEW                   | North/South :elf secret-doors East/West |           |
| c-NS+sW  | c--NSE m-1,0 sW                    | North/South :elf secret-door West       |           |
| c-EW+sN  | c--NEW m-1,0 sN                    | East/West :elf secret-door North        |           |
| c-EW+sS  | c--SEW m-1,0 sS                    | East/west :elf secret-door South        |           |

TODO reorder clockwise NESW

** Test Map

This is a sample map used to develop and test the above.

 For each cell:

 * If the cell contains a reference follow it:
   * Setting absolute position to given X and Y
   * Draw features sequentially
 * Add to the list of "seen" cells.

NOTE: features must cooperate in terms of assumptions in terms of
relative position except for the first named feature.  No movement or
other instructions are added to the path between Features in the same
cell.

NOTE: This approach may only work when drawing the whole map.

TODO: write test, harness and document here

| X | Y | Features | Documentation | Narrative |
|---+---+----------+---------------+-----------|
| 0 | 0 |          | 20x20 area    |           |
| 3 | 0 | c-NW     |               |           |
| 3 | 1 | c-NW     |               |           |
| 3 | 1 | c-N      |               |           |
