#+TITLE: Dungeon Mode Rendering Design in Unified Modeling Language
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/setup/theme-bigblow.setup

This document provides a Unified Modeling Language version of the
design for rendering dungeon-mode maps as Scalable Vector Graphics.

This file is a part of dungeon-mode.  It is not a part of GNU Emacs.
This softare is released under the GNU Public Licence version three
or, at your disgression, any newer version of the GNU Public
License.  For specific terms please see [[LICENSE]] at end-of-file.

* Two Pass Rendering

#+begin_src plantuml :file dm-map-overview.svg :export results
|#AntiqueWhite|user-request|
split
(A)
: given (x y dlv)}
fork
:[""C-n""]>
fork again
:""draw"";
fork again
:""redraw"";
end fork
:enque call;
(b)
detach
|#LightBlue|host-accept|
split again
(b)
fork
:evaluate rules;
if (properties-changed) then (t)
(A)
detach
else (nil)
:select draw code;
endif
end fork
(c)
detach
|#LightBlue|host-response|
split again
(c)
:enque response;
(D)
detach
|#AntiqueWhite|user-accept|
split again
(D)
fork
:tend cache;
fork again
:finish draw;
fork again
end fork
end split
#+end_src

#+RESULTS:
[[file:dm-map-overview.svg]]

In the pencil and paper game we express Dungeon maps on graph-paper.
Most commonly taking an 8x10 inch block, most of a US letter sized
sheet of quad-rule, for each Dungeon Level (dlv).  As the party of
player characters move about within the system of dungeon levels (or
"Maze") the game must reveal information by adding or redrawing
features, mimicking the players taking notes from the Dungeon Master's
oral descriptions.

Our MPTP will render dungeon maps as SVG from sources extract from
org-mode.  As players move, using keyboard commands, etc., we reveal
additional areas of the map by adding to our master path element,
representing corridor and chamber walls and most doors, and SVG
elements which are generally used to add decorations such as text
labels or fill color.

The two pass approach simplifies fog-of-war concerns such as ensuring
the privacy flags (implemented as :keywords punctuating the draw
code).
 * Clear separation of concerns.
 * Maybe cache features after scaling the to the user's display settings.
 * Re-rending efficiencies

** Re-rendering

Changes in game circumstance may require redefining Features. For
example the party could suddenly learn the location all of the Secret
Doors on a level.  This may require replacing some large chunks of the
master SVG path element.  In the case of Default Maze, we have
implemented visibility predicates for all of the draw code that
creates the "Secret Doors" throughout the maze.

To complete this we must, and assuming single-pass render that does
not want to scale images on the remote side of a network connection:

 * iterate the maze cells the player has seen on this level
 * create the new draw code, ensuring that we get the :elf and not
   :default variants
 * edit or replace the master path
 * deal with new/add/changed SVG elements
 * send the updated draw instruction to client to scale and render

Note this punts on the question of transacting a delta, perhaps not supporting it or else requiring the client to keep a cache of the original draw instructions and compare them to calculate offsets.

For Default Maze a small set of features provide variable draw
code.  The first phase, after evaluating game circumstances and potentially bouncing action back to the Party or Dungeon Master, results in a collection of draw code and referenced feature definitions per current play conditions.

The second pass, executed on the Emacs instance where the graphic is
(or will be) displayed.  The phase must consider a cache of features
along with a cross reference of cells which use them, perhaps along
with markers into the scaled rendered path, in order smoothly update
an image already displayed, e.g. inserted into a buffer.

Naturally, much depends on the composition of draw code into features
into a given level, an area where we currently plan much flexibility,
and thus complexity.  More then, perhaps, depends on the complexities
ultimately expressed in the MPTP and driven out while examining it.

* First Pass

Illustrations for (nominally) Server Side processing.  Nominally in
that we need to support the case of local rendering as well; however,
efficiently transacting updates to player is within MPTP scope.

** Server Side (first pass) Variables

#+begin_src plantuml :file server-givenss.svg :export results
title Srver Side (first pass) Variables
start
:dm-map-start-update;
floating note right
  __**GIVEN**__
  *""__dm-svg__              ""object to update or //nil// to return draw code
  * ""__target-map-pos__       ""as tuple ""(x y dlv)"", the new Map Position if successful
  * ""__direction-of-travel__  ""one of N..NE, or Teleport, Stairs, etc.
  * ""__scaling-factor__       ""as a cons cell ""(x-scale . y-scale)""
  *""__map-source__            ""as an hash table
  ** Each Key is one of:
  ***""**Map Feature**   ""a unique symbol, or
  ***""**Map Position**  ""as elsewhere described, or
  ***""//t//             ""as a special case, for features we always draw.
  ** Values are a plist including pairs as such:
  ""   (list 'plan          LIST             ;; raw draw source""
  ""         'paths         LIST             ;; abbreviated SVG path code""
  ""         'elements      LIST             ;; complete SVG nodes""
  ""         'documentation STRING           ;; local doc-string""
  ""         'narrative     STRING_OR_SYMBOL ;; narration for players""
  ""         'behaviour     LIST            );; symbols or functions""
  *""__party-location-plist__  ""Which properites derive from:
  **""**Party** compisition    ""presence of each **Race**, etc.
  **""**Event**                ""including circumstantial e.g. Chased by Slugs
  **""**Special Powers**       ""character **Special Power** may affect movement
  **""**Map Position**         ""as tuple ""(x y div)"", prior to this move
  **""**Map Seen**             ""list of **Map Position**
  **""t                        ""default behaviours, e.g. automation
end note
end
#+end_src

#+RESULTS:
[[file:server-predicates.svg]]

** First Pass Predicates

#+begin_src plantuml :file server-predicates.svg :export results
title Server Predicates

start
  (a)
  partition with-properties {
  floating note left
  === //Behaivours can affect movement so//
  === //the server must evaluate them//
  === //to see if they do prior to //
  === //returning drawing instructions.//
  end note
    while (next property?) is (t)
      if (functionp) then (t)
        :apply|
      elseif (symbolp) then (t)
        :resolve|
      else (nil)
      endif
      if (target-map-pos changed?) then (t)
        (a)
	detach
      endif
    endwhile (nil)
  }
  (b)
  detach
#+end_src

#+RESULTS:
[[file:server-predicates.svg]]

** Resolve Paths

#+begin_src plantuml :file uml--server-resolve-paths.svg :export results
title Resolve Paths
  (b)
   note left
  ""let ((**path** (gethash target-map-pos))""
  ""      **features**)""
  end note

  partition resolve-paths {
    while (path contains symbol?) is (t)
      :Get symbol-path from cache;
      while (symbol-path contains inner-symbol?) is (t)
        :setq symbol-path (resolve-paths inner-symbol);
      endwhile (nil)
      :add-to-list features symbol-path;
    endwhile (nil)
  }
:return (path . features);
stop
#+end_src

#+RESULTS:
[[file:uml--server-resolve-paths.svg]]

* Second Pass

These illustrations represent work to perform just before display.
We'd like to be able to consider different client-side caching, for
example of drawing commands after scaling.

** Request to Server

#+begin_src plantuml :file uml--client-request.svg :export results
title Request to Server
start
partition Fetch {
  :INTERACTIVE\n//As via e.g, ""C-n"", ""C-j"", ...//;
  :add to pending-call-alist\n""  ( ARGS :WHEN DTTM-STRING""\n""    :CONTEXT BOF)"";
  :dm-call-server-func ""draw""\n""  :SOUTH (1 '[\C-n] dm-map-setup-local-draw)""\n""  :FROM '(0 0 1)""\n""  :TO '(0 1 1)"";
}
-[#blue]->  ""REMOTE ASYNC"";
(B)
detach
#+end_src

#+RESULTS:
[[file:uml--client-request.svg]]


** Response from Server

#+begin_src plantuml :file uml--remote-swag.svg :export results
(b)
-[#blue]-> ""remote"";
:validate args\n//accept://\n * known symbols (unquoted)\n *  integers\n * properly ballanced double quoted strings;
-[#blue]-> remote responds;
(c)
detach
#+end_src

#+RESULTS:
[[file:uml--remote-swag.svg]]

** Client Response Handler

#+begin_src plantuml :file uml--dm-handle-server-response.svg :export results
title Client Response Handler
(C)
-> local function call by remote;

:""dm-call-client-func(orig-args, result)""|
note left
//result as://
"" **path**     ""string
"" **features** ""list of ""(SYMBOL STRING)""
end note

partition dm-handle-server-response {
  :remove-from-list;

  while (features?) is (t)
    if (feature previously cached?) then (t)
      if (feature differs from cache) then (t)
        :collect feature referents for redraw;
        :freshen cache;
      else (nil)
      endif
    else (nil)

      :add feature to cache;
    endif

    :add cell to list of referents for feature;
  endwhile (nil)
  :cache path;
  note left: E.g. ""(addhash map-cache (x y dlv) path)""
}

(D)
-> local deligation;
detach
#+end_src

#+RESULTS:
[[file:uml--dm-handle-server-response.svg]]

** Update Buffer or File

#+begin_src plantuml :file uml--dm-map-finish-update.svg :export results
(D)
-> from local;
partition dm-map-finish-update {
  :maybe-adjust-viewport;
  :maybe-scale-and-update(BOF path features);
  :maybe-save(BOF);
}
end
#+end_src

#+RESULTS:
[[file:uml--dm-map-finish-update.svg]]
# EOF
#  LocalWords:  MPTP
=======
 #+TITLE: Dungeon Mode Rendering Design in Unified Modeling Language


This document provides a Unified Modeling Language version of the
design for rendering dungeon-mode maps as Scalable Vector Graphics.

* Two Pass Rendering

#+begin_src plantuml :file dm-map-overview.svg :export results
|#AntiqueWhite|user-request|
split
(A)
: given (x y dlv)}
fork
:[""C-n""]>
fork again
:""draw"";
fork again
:""redraw"";
end fork
:enque call;
(b)
detach
|#LightBlue|host-accept|
split again
(b)
fork
:evaluate rules;
if (properties-changed) then (t)
(A)
detach
else (nil)
:select draw code;
endif
end fork
(c)
detach
|#LightBlue|host-response|
split again
(c)
:enque response;
(D)
detach
|#AntiqueWhite|user-accept|
split again
(D)
fork
:tend cache;
fork again
:finish draw;
fork again
end fork
end split
#+end_src

#+RESULTS:
[[file:dm-map-overview.svg]]

In the pencil and paper game we express Dungeon maps on graph-paper.
Most commonly taking an 8x10 inch block, most of a US letter sized
sheet of quad-rule, for each Dungeon Level (dlv).  As the party of
player characters move about within the system of dungeon levels (or
"Maze") the game must reveal information by adding or redrawing
features, mimicking the players taking notes from the Dungeon Master's
oral descriptions.

Our MPTP will render dungeon maps as SVG from sources extract from
org-mode.  As players move, using keyboard commands, etc., we reveal
additional areas of the map by adding to our master path element,
representing corridor and chamber walls and most doors, and SVG
elements which are generally used to add decorations such as text
labels or fill color.

The two pass approach simplifies fog-of-war concerns such as ensuring
the privacy flags (implemented as :keywords punctuating the draw
code).
 * Clear separation of concerns.
 * Maybe cache features after scaling the to the user's display settings.
 * Re-rending efficiencies

** Re-rendering

Changes in game circumstance may require redefining Features. For
example the party could suddenly learn the location all of the Secret
Doors on a level.  This may require replacing some large chunks of the
master SVG path element.  In the case of Default Maze, we have
implemented visibility predicates for all of the draw code that
creates the "Secret Doors" throughout the maze.

To complete this we must, and assuming single-pass render that does
not want to scale images on the remote side of a network connection:

 * iterate the maze cells the player has seen on this level
 * create the new draw code, ensuring that we get the :elf and not
   :default variants
 * edit or replace the master path
 * deal with new/add/changed SVG elements
 * send the updated draw instruction to client to scale and render

Note this punts on the question of transacting a delta, perhaps not supporting it or else requiring the client to keep a cache of the original draw instructions and compare them to calculate offsets.

For Default Maze a small set of features provide variable draw
code.  The first phase, after evaluating game circumstances and potentially bouncing action back to the Party or Dungeon Master, results in a collection of draw code and referenced feature definitions per current play conditions.

The second pass, executed on the Emacs instance where the graphic is
(or will be) displayed.  The phase must consider a cache of features
along with a cross reference of cells which use them, perhaps along
with markers into the scaled rendered path, in order smoothly update
an image already displayed, e.g. inserted into a buffer.

Naturally, much depends on the composition of draw code into features
into a given level, an area where we currently plan much flexibility,
and thus complexity.  More then, perhaps, depends on the complexities
ultimately expressed in the MPTP and driven out while examining it.

* First Pass

Illustrations for (nominally) Server Side processing.  Nominally in
that we need to support the case of local rendering as well; however,
efficiently transacting updates to player is within MPTP scope.

** Server Side (first pass) Variables

#+begin_src plantuml :file server-givenss.svg :export results
title Srver Side (first pass) Variables
start
:dm-map-start-update;
floating note right
  __**GIVEN**__
  *""__dm-svg__              ""object to update or //nil// to return draw code
  * ""__target-map-pos__       ""as tuple ""(x y dlv)"", the new Map Position if successful
  * ""__direction-of-travel__  ""one of N..NE, or Teleport, Stairs, etc.
  * ""__scaling-factor__       ""as a cons cell ""(x-scale . y-scale)""
  *""__map-source__            ""as an hash table
  ** Each Key is one of:
  ***""**Map Feature**   ""a unique symbol, or
  ***""**Map Position**  ""as elsewhere described, or
  ***""//t//             ""as a special case, for features we always draw.
  ** Values are a plist including pairs as such:
  ""   (list 'plan          LIST             ;; raw draw source""
  ""         'paths         LIST             ;; abbreviated SVG path code""
  ""         'elements      LIST             ;; complete SVG nodes""
  ""         'documentation STRING           ;; local doc-string""
  ""         'narrative     STRING_OR_SYMBOL ;; narration for players""
  ""         'behaviour     LIST            );; symbols or functions""
  *""__party-location-plist__  ""Which properites derive from:
  **""**Party** compisition    ""presence of each **Race**, etc.
  **""**Event**                ""including circumstantial e.g. Chased by Slugs
  **""**Special Powers**       ""character **Special Power** may affect movement
  **""**Map Position**         ""as tuple ""(x y div)"", prior to this move
  **""**Map Seen**             ""list of **Map Position**
  **""t                        ""default behaviours, e.g. automation
end note
end
#+end_src

#+RESULTS:
[[file:server-predicates.svg]]

** First Pass Predicates

#+begin_src plantuml :file server-predicates.svg :export results
title Server Predicates

start
  (a)
  partition with-properties {
  floating note left
  === //Behaivours can affect movement so//
  === //the server must evaluate them//
  === //to see if they do prior to //
  === //returning drawing instructions.//
  end note
    while (next property?) is (t)
      if (functionp) then (t)
        :apply|
      elseif (symbolp) then (t)
        :resolve|
      else (nil)
      endif
      if (target-map-pos changed?) then (t)
        (a)
	detach
      endif
    endwhile (nil)
  }
  (b)
  detach
#+end_src

#+RESULTS:
[[file:server-predicates.svg]]

** Resolve Paths

#+begin_src plantuml :file uml--server-resolve-paths.svg :export results
title Resolve Paths
  (b)
   note left
  ""let ((**path** (gethash target-map-pos))""
  ""      **features**)""
  end note

  partition resolve-paths {
    while (path contains symbol?) is (t)
      :Get symbol-path from cache;
      while (symbol-path contains inner-symbol?) is (t)
        :setq symbol-path (resolve-paths inner-symbol);
      endwhile (nil)
      :add-to-list features symbol-path;
    endwhile (nil)
  }
:return (path . features);
stop
#+end_src

#+RESULTS:
[[file:uml--server-resolve-paths.svg]]

* Second Pass

These illustrations represent work to perform just before display.
We'd like to be able to consider different client-side caching, for
example of drawing commands after scaling.

** Request to Server

#+begin_src plantuml :file uml--client-request.svg :export results
title Request to Server
start
partition Fetch {
  :INTERACTIVE\n//As via e.g, ""C-n"", ""C-j"", ...//;
  :add to pending-call-alist\n""  ( ARGS :WHEN DTTM-STRING""\n""    :CONTEXT BOF)"";
  :dm-call-server-func ""draw""\n""  :SOUTH (1 '[\C-n] dm-map-setup-local-draw)""\n""  :FROM '(0 0 1)""\n""  :TO '(0 1 1)"";
}
-[#blue]->  ""REMOTE ASYNC"";
(B)
detach
#+end_src

#+RESULTS:
[[file:uml--client-request.svg]]


** Response from Server

#+begin_src plantuml :file uml--remote-swag.svg :export results
(b)
-[#blue]-> ""remote"";
:validate args\n//accept://\n * known symbols (unquoted)\n *  integers\n * properly ballanced double quoted strings;
-[#blue]-> remote responds;
(c)
detach
#+end_src

#+RESULTS:
[[file:uml--remote-swag.svg]]

** Client Response Handler

#+begin_src plantuml :file uml--dm-handle-server-response.svg :export results
title Client Response Handler
(C)
-> local function call by remote;

:""dm-call-client-func(orig-args, result)""|
note left
//result as://
"" **path**     ""string
"" **features** ""list of ""(SYMBOL STRING)""
end note

partition dm-handle-server-response {
  :remove-from-list;

  while (features?) is (t)
    if (feature previously cached?) then (t)
      if (feature differs from cache) then (t)
        :collect feature referents for redraw;
        :freshen cache;
      else (nil)
      endif
    else (nil)

      :add feature to cache;
    endif

    :add cell to list of referents for feature;
  endwhile (nil)
  :cache path;
  note left: E.g. ""(addhash map-cache (x y dlv) path)""
}

(D)
-> local deligation;
detach
#+end_src

#+RESULTS:
[[file:uml--dm-handle-server-response.svg]]

** Update Buffer or File

#+begin_src plantuml :file uml--dm-map-finish-update.svg :export results
(D)
-> from local;
partition dm-map-finish-update {
  :maybe-adjust-viewport;
  :maybe-scale-and-update(BOF path features);
  :maybe-save(BOF);
}
end
#+end_src

#+RESULTS:
[[file:uml--dm-map-finish-update.svg]]
# EOF
#  LocalWords:  MPTP

* LICENSE

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
